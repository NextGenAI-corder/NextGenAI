package main

import (
	"bytes"
	"encoding/json"
	"io/ioutil"
	"log"
	"net/http"
	"os"

	"github.com/line/line-bot-sdk-go/linebot"
)

var (
	// 環境変数からLINEとOpenAIのAPIキー等を取得
	channelSecret      = os.Getenv("LINE_CHANNEL_SECRET")
	channelAccessToken = os.Getenv("LINE_CHANNEL_ACCESS_TOKEN")
	openaiAPIKey       = os.Getenv("OPENAI_API_KEY")
)

func main() {
	// /callback エンドポイントにリクエストが来たら handler を呼び出す
	http.HandleFunc("/callback", callbackHandler)

	// ポート8080でHTTPサーバを起動
	if err := http.ListenAndServe(":8080", nil); err != nil {
		log.Fatal(err)
	}
}

func callbackHandler(w http.ResponseWriter, r *http.Request) {
	// LINE Botのインスタンスを作成
	bot, err := linebot.New(channelSecret, channelAccessToken)
	if err != nil {
		http.Error(w, "Failed to create bot", http.StatusInternalServerError)
		return
	}

	// リクエストを検証し、イベントを取得
	events, err := bot.ParseRequest(r)
	if err != nil {
		if err == linebot.ErrInvalidSignature {
			http.Error(w, "Invalid signature", http.StatusBadRequest)
		} else {
			http.Error(w, "Failed to parse request", http.StatusInternalServerError)
		}
		return
	}

	// イベントごとに処理
	for _, event := range events {
		// メッセージイベントのみ処理
		if event.Type == linebot.EventTypeMessage {
			if message, ok := event.Message.(*linebot.TextMessage); ok {
				userMessage := message.Text

				// ChatGPT APIに送るリクエストボディを作成
				reqBody := map[string]interface{}{
					"model": "gpt-3.5-turbo",
					"messages": []map[string]string{
						{"role": "user", "content": userMessage},
					},
				}
				jsonData, _ := json.Marshal(reqBody)

				// OpenAI API へのPOSTリクエストを作成
				req, _ := http.NewRequest("POST", "https://api.openai.com/v1/chat/completions", bytes.NewBuffer(jsonData))
				req.Header.Set("Content-Type", "application/json")
				req.Header.Set("Authorization", "Bearer "+openaiAPIKey)

				// リクエスト送信
				client := &http.Client{}
				resp, err := client.Do(req)
				if err != nil {
					log.Println("OpenAI request failed:", err)
					continue
				}
				defer resp.Body.Close()

				// レスポンスを読み取る
				body, _ := ioutil.ReadAll(resp.Body)
				var result map[string]interface{}
				if err := json.Unmarshal(body, &result); err != nil {
					log.Println("Failed to parse OpenAI response:", err)
					continue
				}

				// ChatGPTからの応答メッセージを抽出
				choices := result["choices"].([]interface{})
				messageMap := choices[0].(map[string]interface{})
				reply := messageMap["message"].(map[string]interface{})["content"].(string)

				// LINEに応答を返す
				if _, err = bot.ReplyMessage(event.ReplyToken, linebot.NewTextMessage(reply)).Do(); err != nil {
					log.Println("Failed to send reply:", err)
				}
			}
		}
	}
}