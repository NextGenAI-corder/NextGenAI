import (
  "bytes"  // バイナリデータ（JSON）をリクエストのボディに追加するために使用
  "encoding/json"  // JSONデータのエンコード・デコードに使用
  "net/http"  // HTTPリクエストの送信に使用
)

// ChatRequestは、GPT-3 APIに送信するデータの構造を定義します
type ChatRequest struct {
  Model    string    `json:"model"`  // 使用するモデル名（GPT-3.5-turboなど）
  Messages []Message `json:"messages"`  // ユーザーとモデルの会話履歴
}

// Messageは、メッセージの役割（ユーザーやシステム）とコンテンツを保持します
type Message struct {
  Role    string `json:"role"`  // メッセージの役割（user, systemなど）
  Content string `json:"content"`  // メッセージの内容
}

// ChatResponseは、GPT-3 APIからのレスポンス構造を定義します
type ChatResponse struct {
  Choices []struct {
    Message Message `json:"message"`  // モデルが返すメッセージ
  } `json:"choices"`  // 複数の選択肢を返す場合があるため、配列
}

// chatWithGPTは、ユーザーのメッセージをOpenAIのGPT-3に送信し、返答を受け取る関数
func chatWithGPT(userMessage string) (string, error) {
  // チャットリクエストのペイロードを準備
  payload := ChatRequest{
    Model: "gpt-3.5-turbo",  // 使用するモデル
    Messages: []Message{{Role: "user", Content: userMessage}},  // ユーザーからのメッセージ
  }

  // ペイロードをJSON形式にエンコード
  jsonData, _ := json.Marshal(payload)

  // OpenAI APIにPOSTリクエストを送信
  req, _ := http.NewRequest("POST", "https://api.openai.com/v1/chat/completions", bytes.NewBuffer(jsonData))
  req.Header.Set("Content-Type", "application/json")  // JSONフォーマットでリクエスト送信
  req.Header.Set("Authorization", "Bearer " + os.Getenv("OPENAI_API_KEY"))  // 認証トークンをヘッダーにセット

  // HTTPクライアントでリクエストを送信
  client := &http.Client{}
  res, err := client.Do(req)  // 実際にリクエストを送信
  if err != nil {
    return "", err  // エラーがあれば返す
  }
  defer res.Body.Close()  // 関数終了時にレスポンスのボディを閉じる

  // レスポンスをChatResponse構造体にデコード
  var result ChatResponse
  json.NewDecoder(res.Body).Decode(&result)

  // GPTの最初の選択肢のメッセージ内容を返す
  return result.Choices[0].Message.Content, nil
}