import (
  "bytes"
  "encoding/json"
  "net/http"
)

type ChatRequest struct {
  Model    string    `json:"model"`
  Messages []Message `json:"messages"`
}

type Message struct {
  Role    string `json:"role"`
  Content string `json:"content"`
}

type ChatResponse struct {
  Choices []struct {
    Message Message `json:"message"`
  } `json:"choices"`
}

func chatWithGPT(userMessage string) (string, error) {
  payload := ChatRequest{
    Model: "gpt-3.5-turbo",
    Messages: []Message{{Role: "user", Content: userMessage}},
  }
  jsonData, _ := json.Marshal(payload)

  req, _ := http.NewRequest("POST", "https://api.openai.com/v1/chat/completions", bytes.NewBuffer(jsonData))
  req.Header.Set("Content-Type", "application/json")
  req.Header.Set("Authorization", "Bearer " + os.Getenv("OPENAI_API_KEY"))

  client := &http.Client{}
  res, err := client.Do(req)
  if err != nil {
    return "", err
  }
  defer res.Body.Close()

  var result ChatResponse
  json.NewDecoder(res.Body).Decode(&result)
  return result.Choices[0].Message.Content, nil
}